#include "KernelGenerator.h"
#include <iostream>
#include <sstream>
using namespace std;

KernelGenerator::KernelGenerator( 
	std::string function, 
	std::vector<CLUnitArgument> &arguments,
	std::string returnType )
	: myFunction(function), myReturnType( returnType ), myArguments( arguments )
{

}

string KernelGenerator::intToString( int i )
{
    return static_cast<ostringstream*>( &(ostringstream() << i) )->str();
}

string KernelGenerator::generate()
{
	string ret = 
		"/** Automatically generated by KernelGenerator **/\n" \
		"__kernel void _autogen_run_" + myFunction;
	ret += "( ";

	for ( int i = 0; i < myArguments.size(); i++ )
	{
		// global *someType arg3,
		ret += "__global " + myArguments[i].getType() + " *arg" + intToString( i ) + ", ";
	}

	if ( myReturnType != "void" )
		ret += "__global " + myReturnType + " *ret ";
	else
	{
		// Take off the comma
		ret.erase( ret.end() - 2 );
	}

	ret +=")\n";

	ret += "{";
	ret += "\n";	

	ret += "\t";
	if ( myReturnType != "void" )
		ret += "*ret = ";
	
	ret += myFunction + "( ";
	for ( unsigned i = 0; i < myArguments.size(); i++  )
	{
		if ( !myArguments[i].isArray() )
			ret += "*";
		
		ret += "arg" + intToString( i ) + ", ";
	}	

	// take off last comma.
	ret.erase( ret.length() - 2, 1 );

	ret += ");";
	ret += "\n";

	ret += "}";

	return ret;
}

string KernelGenerator::getKernelFunction()
{
	return "_autogen_run_" + myFunction;
}
