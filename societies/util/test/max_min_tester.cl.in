#include "../max_min.cl"

__kernel void max_min_first_pass_tester(
	__global float *global_values,
	__global uchar *global_sort_tree
	)
{
	// There are at most 256 threads in the workgroup, so allocate
	//  memory for the max. It doesn't hurt if the actual size is less.
	__local float values[256];
	__local uchar sort_tree[128];

	size_t local_id = get_local_id( 0 );
	values[local_id] = global_values[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );

	max_min_first_pass( MAX, values, sort_tree, 0, NULL );
	barrier( CLK_LOCAL_MEM_FENCE );
	
	size_t local_size = get_local_size( 0 );
	if ( local_id < ( ( local_size + 1 ) / 2 ) )
		global_sort_tree[local_id] = sort_tree[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );
}

__kernel void max_tester(
	__global float *global_values,
	__global uchar *global_sort_tree,
	__global uchar *global_max
	)
{
	// There are at most 256 threads in the workgroup, so allocate
	//  memory for the max. It doesn't hurt if the actual size is less.
	__local float values[256];
	__local uchar sort_tree[128];

	size_t local_id = get_local_id( 0 );
	values[local_id] = global_values[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );

	uchar max = max_index( values, sort_tree );
	if ( get_local_id( 0 ) == 0 )
		*global_max = max;

	size_t local_size = get_local_size( 0 );
	if ( local_id < ( ( local_size + 1 ) / 2 ) )
		global_sort_tree[local_id] = sort_tree[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );
}
