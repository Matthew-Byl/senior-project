#include "../max_min.cl"

__kernel void max_min_first_pass_tester(
	__global float *global_values,
	__global uint *global_sort_tree
	)
{
	// There are at most 256 threads in the workgroup, so allocate
	//  memory for the max. It doesn't hurt if the actual size is less.
	__local float values[256];
	__local uint sort_tree[128];

	size_t local_id = get_local_id( 0 );
	values[local_id] = global_values[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );

	max_min_first_pass( MAX, values, sort_tree, 0, NULL );
	barrier( CLK_LOCAL_MEM_FENCE );
	
	size_t local_size = get_local_size( 0 );
	if ( local_id < ( ( local_size + 1 ) / 2 ) )
		global_sort_tree[local_id] = sort_tree[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );
}

__kernel void max_tester(
	__global float *global_values,
	__global uint *global_sort_tree,
	__global uint *global_max
	)
{
	// There are at most 256 threads in the workgroup, so allocate
	//  memory for the max. It doesn't hurt if the actual size is less.
	__local float values[256];
	__local uint sort_tree[128];

	size_t local_id = get_local_id( 0 );
	values[local_id] = global_values[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );

	uint max = max_index( values, sort_tree );
	if ( get_local_id( 0 ) == 0 )
		*global_max = max;

	size_t local_size = get_local_size( 0 );
	if ( local_id < ( ( local_size + 1 ) / 2 ) )
		global_sort_tree[local_id] = sort_tree[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );
}

// Masks out every other value and takes a min.
__kernel void max_min_mask_tester(
	__global float *global_values,
	__global uint *global_result,
	__global uint *global_result_no_mask
	)
{
	__local uchar mask[256];
	__local float values[256];
	__local uint sort_tree[128];

	size_t local_id = get_local_id( 0 );
	values[local_id] = global_values[local_id];

	// Mask out every odd index.
	if ( local_id % 2 )
		mask[local_id] = TRUE;
	else
		mask[local_id] = FALSE;

	barrier( CLK_LOCAL_MEM_FENCE );

	uint mask_result = max_min( 
		MIN, 
		values, 
		sort_tree,
		TRUE,
		mask
	);
	if ( get_local_id( 0 ) == 0 )
		*global_result = mask_result;

	uint result = max_min(
		MIN,
		values,
		sort_tree,
		FALSE,
		NULL
		);
	if ( get_local_id( 0 ) == 0 )
		*global_result_no_mask = result;
}

// Assume n=6.
__kernel void n_max_indices_tester(
	__global float *host_values,
	__global uint *host_results
	)
{
	__local float values[255];
	__local uint sort_tree[128];
	__local uint results[6];
	__local uchar mask[255];

	size_t local_id = get_local_id( 0 );
	values[local_id] = host_values[local_id];
	barrier( CLK_LOCAL_MEM_FENCE );

	n_max_indices(
		6,
		values,
		sort_tree,
		results,
		mask
		);

	if ( local_id < 10 )
	{
		printf( "Sort tree %2d: %d\n", local_id, sort_tree[local_id]);
	}

	printf( "Mask %2d: %d\n", local_id, (int)mask[local_id] );

	if ( local_id < 6 )
	{
		host_results[local_id] = results[local_id];
	}
}
